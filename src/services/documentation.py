"""Documentation service for workflow result generation."""

import datetime
import re
from pathlib import Path
from typing import Dict

from ..core.state import WorkflowState


def create_document_filename(original_question: str) -> str:
    """Create a safe filename from the original question."""
    question_summary = (
        original_question[:30]
        .replace("/", "")
        .replace("\\", "")
        .replace(":", "Ôºö")
        .replace("?", "Ôºü")
        .replace("*", "")
        .replace("<", "")
        .replace(">", "")
        .replace("|", "")
    )
    if len(original_question) > 30:
        question_summary += "..."
    
    return f"{question_summary}_ÂàÜÊûêÁµêÊûú.md"


def extract_corrected_version(reviewed_output: str) -> str:
    """Extract the corrected version from review output using various patterns."""
    if not reviewed_output:
        return ""

    # Look for patterns like "‰øÆÊ≠£Áâà:" or actual corrected text sections
    corrected_patterns = [
        r"‰øÆÊ≠£Áâà[Ôºö:]\s*\n(.+?)(?=\n\n##|\n\n---|\Z)",
        r"‰øÆÊ≠£[Ôºö:]\s*\n(.+?)(?=\n\n##|\n\n---|\Z)",
        r"ÊîπÂñÑÁâà[Ôºö:]\s*\n(.+?)(?=\n\n##|\n\n---|\Z)",
        r"‰ª•‰∏ã„Åå‰øÆÊ≠£Áâà„Åß„Åô[Ôºö:]?\s*\n(.+?)(?=\n\n##|\n\n---|\Z)",
        r"‰øÆÊ≠£Âæå[Ôºö:]?\s*\n(.+?)(?=\n\n##|\n\n---|\Z)",
    ]

    for pattern in corrected_patterns:
        match = re.search(pattern, reviewed_output, re.DOTALL | re.MULTILINE)
        if match:
            final_corrected_version = match.group(1).strip()
            print(f"‚úÖ Extracted corrected version using pattern: {pattern[:20]}...")
            return final_corrected_version

    # If no explicit corrected version found, check for structured corrections
    improvement_patterns = [
        r"## „É¨„Éì„É•„ÉºÁµêÊûú.*?## ‰øÆÊ≠£ÂÜÖÂÆπ.*?\n(.+?)(?=\n## |$)",
        r"### ‰øÆÊ≠£ÂÜÖÂÆπ\s*\n(.+?)(?=\n### |$)",
        r"**‰øÆÊ≠£Áâà**\s*\n(.+?)(?=\n**|$)",
        r"\*\*‰øÆÊ≠£Áâà\*\*\s*\n(.+?)(?=\n\*\*|$)",
    ]

    for pattern in improvement_patterns:
        match = re.search(pattern, reviewed_output, re.DOTALL | re.MULTILINE)
        if match:
            final_corrected_version = match.group(1).strip()
            print("‚úÖ Extracted improvement section using pattern")
            return final_corrected_version

    # If still no corrected version, check if the review contains substantial content
    if (
        "‰øÆÊ≠£" in reviewed_output
        and len(reviewed_output) > 1000
        and any(
            keyword in reviewed_output
            for keyword in ["Linear", "GitHub", "Ê©üËÉΩ", "ÂÆüË£Ö", "Ë®≠ÂÆö", "ÊâãÈ†Ü"]
        )
    ):
        print("‚úÖ Using complete review output as it contains substantial technical corrections")
        return reviewed_output

    return ""


def generate_markdown_content(state: WorkflowState, final_corrected_version: str) -> str:
    """Generate the markdown content for documentation."""
    original_question = state.get("original_user_input", "")
    initial_output = state.get("initial_output", "")
    reviewed_output = state.get("reviewed_output", "")
    search_results = state.get("search_results", "")

    corrected_section = ""
    if final_corrected_version and final_corrected_version != reviewed_output:
        corrected_section = f'''## 3. ÊúÄÁµÇ‰øÆÊ≠£Áâà

‰ª•‰∏ã„ÅØClaude Code„É¨„Éì„É•„Éº„Å´Âü∫„Å•„Åè‰øÆÊ≠£Áâà„Åß„ÅôÔºö

{final_corrected_version}

### ‰øÆÊ≠£„ÅÆË©≥Á¥∞Ë™¨Êòé
‰∏äË®ò„ÅÆ‰øÆÊ≠£Áâà„ÅØÂÖÉ„ÅÆÂõûÁ≠î„Å´ÂØæ„Åô„Çã„É¨„Éì„É•„Éº„ÅßÊåáÊëò„Åï„Çå„Åü‰ª•‰∏ã„ÅÆÊîπÂñÑÁÇπ„ÇíÂèçÊò†„Åó„Å¶„ÅÑ„Åæ„ÅôÔºö
- ÊäÄË°ìÁöÑÊ≠£Á¢∫ÊÄß„ÅÆÂêë‰∏ä
- ÊúÄÊñ∞ÊÉÖÂ†±„ÅÆËøΩÂä†
- Ë´ñÁêÜÁöÑ‰∏ÄË≤´ÊÄß„ÅÆÊîπÂñÑ
- ÂÆåÂÖ®ÊÄß„ÅÆÂêë‰∏ä
'''

    return f"""# LangGraph„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°åÁµêÊûú

## ÂÆüË°åÊÉÖÂ†±
- **ÂÆüË°åÊó•ÊôÇ**: {datetime.datetime.now().strftime("%YÂπ¥%mÊúà%dÊó• %H:%M:%S")}
- **Ë≥™Âïè**: {original_question}
- **„ÉØ„Éº„ÇØ„Éï„É≠„Éº„Ç§„ÉÜ„É¨„Éº„Ç∑„Éß„É≥**: {state.get("iteration", 0)}

## ÂÖÉ„ÅÆË≥™Âïè
```
{original_question}
```

## Ê§úÁ¥¢ÁµêÊûú„ÅÆÊ¶ÇË¶Å
```
{search_results[:500] if search_results else "Ê§úÁ¥¢ÁµêÊûú„Å™„Åó"}...
```

## 1. ÂàùÂõûAIÂõûÁ≠îÔºàOllama gpt-oss:20bÔºâ
{initial_output if initial_output else "ÂàùÂõûÂõûÁ≠î„Å™„Åó"}

## 2. Claude Code„É¨„Éì„É•„Éº„Éª‰øÆÊ≠£ÁµêÊûú
{reviewed_output if reviewed_output else "„É¨„Éì„É•„ÉºÁµêÊûú„Å™„Åó"}

{corrected_section}

---
*„Åì„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅØ LangGraph + Claude Code SDK „ÉØ„Éº„ÇØ„Éï„É≠„Éº„Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
"""


def documentation_node(state: WorkflowState) -> WorkflowState:
    """Generate markdown documentation comparing initial and final outputs."""
    original_question = state.get("original_user_input", "")
    reviewed_output = state.get("reviewed_output", "")

    print("üìù Generating documentation...")

    try:
        # Create docs directory if it doesn't exist
        docs_dir = Path.home() / "workspace" / "Docs"
        docs_dir.mkdir(parents=True, exist_ok=True)

        # Create filename and path
        filename = create_document_filename(original_question)
        file_path = docs_dir / filename

        # Extract final corrected version if available
        final_corrected_version = extract_corrected_version(reviewed_output)

        # Generate markdown content
        markdown_content = generate_markdown_content(state, final_corrected_version)

        # Write to file
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(markdown_content)

        print(f"‚úÖ Documentation generated: {file_path}")

        return {
            **state,
            "document_generated": True,
            "document_content": markdown_content,
            "document_path": str(file_path),
        }

    except Exception as e:
        print(f"‚ùå Error generating documentation: {e}")
        return {
            **state,
            "document_generated": False,
            "document_content": "",
            "document_path": "",
        }